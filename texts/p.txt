import express, { json } from "express";
import http from "http";
import { Server, Socket } from "socket.io";
import { mongodbConnect } from "./mongodb";
import cors from "cors";
import router from "./routes";

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

const corsOptions = {
  origin: "*", // Replace with your frontend domain
};

app.use(cors(corsOptions));
// Define the types for participants and rooms
type Participant = string;
type Room = string;

// Initialize a data structure to store rooms
const rooms: { [key: string]: Room } = {};

app.use(json());
app.use("/api", router);

io.on("connection", (socket: Socket) => {
  console.log(rooms);
  console.log("User connected:", socket.id);

  socket.on("create room", (user: Participant, doctor: Participant) => {
    let roomKey = doctor + "-" + user;

    if (!rooms[roomKey]) {
      rooms[roomKey] = user + "-" + doctor;
      console.log("room created");
    } else {
      console.log("room already exists");
    }
  });

  // Function to create or get the room for a user and doctor
  // function createOrGetRoom(user: Participant, doctor: Participant): string {
  //   const participants = [user, doctor];
  //   const roomKey = participants.sort().join("-"); // Generate a unique key for the room

  //   if (!rooms[roomKey]) {
  //     rooms[roomKey] = {
  //       participants,
  //       messages: [],
  //     };
  //   }
  //   console.log(roomKey, rooms);
  //   return roomKey;
  // }

  // // Function to check if a user and doctor already have a room
  // function hasRoom(user: Participant, doctor: Participant): boolean {
  //   const participants = [user, doctor];
  //   const roomKey = participants.sort().join("-");
  //   console.log(rooms);
  //   console.log(roomKey);
  //   return !rooms[roomKey];
  // }

  // Event when a user wants to create or join a room with a doctor

  socket.on(
    "joinRoom",
    ({ user, doctor }: { user: Participant; doctor: Participant }) => {

      if(rooms[doctor+'-'+user]){
          socket.join(user+'-'+doctor);
      }else{
        console.log('room dont exists please create one and try again');
      }

      // console.log(user, doctor);
      // if (rooms[socket.id]) {
      //   console.log("room exists");
      // } else {
      //   socket.join(user + "-" + doctor);
      //   rooms[socket.id] = user + "-" + doctor;
      //   console.log(socket.id, "joined the room", rooms[socket.id]);
      // }
    }
  );

  // Event when the user sends a message to the doctor in the room
  socket.on(
    "sendMessage",
    ({
      user,
      doctor,
      message,
    }: {
      user: Participant;
      doctor: Participant;
      message: string;
    }) => {
      console.log("mesga are sent by", socket.id, "to", rooms[socket.id]);

      // const room = rooms[socket.id] as string | string[];

      // if (room) {
      //   io.to(room).emit("sendMessage", { user, doctor, message });
      //   console.log(user, message);
      // }

      

      // console.log(message);
      // //  const roomKey = rooms[user+"-"+doctor] ? true : createOrGetRoom(user, doctor)
      // const roomKey = user + "-" + doctor;
      // console.log(rooms[roomKey]);
      // if (rooms[roomKey]) {
      //   rooms[roomKey].messages.push({ user, message });
      //   // Broadcast the message to everyone in the room
      //   io.to(roomKey).emit("messageSent", { user, message });
      // } else {
      //   console.log(
      //     "create a room then join the room then come here gand maranekoo"
      //   );
      // }
    }
  );

  // Clean up room when the user disconnects
  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
    let key = socket.id;
    delete rooms.key;

    // Clean up rooms and messages if necessary
    // You can add additional logic here to handle room deletion
  });
});

const port = 3001;
server.listen(port, async () => {
  await mongodbConnect();

  console.log(`Server is running on http://localhost:${port}`);
});


























import express, { json } from "express";
import http from "http";
import { Server, Socket } from "socket.io";
import { mongodbConnect } from "./mongodb";
import cors from "cors";
import router from "./routes";

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

const corsOptions = {
  origin: "*", // Replace with your frontend domain
};

app.use(cors(corsOptions));
// Define the types for participants and rooms
type Participant = string;
type Room = string;

// Initialize a data structure to store rooms
const rooms: { [key: string]: Room } = {};

app.use(json());
app.use("/api", router);

io.on("connection", (socket: Socket) => {
  console.log(rooms);
  console.log("User connected:", socket.id);

  socket.on("create room", (user: Participant, doctor: Participant) => {
    let roomKey = doctor + "-" + user;

    if (!rooms[roomKey]) {
      rooms[roomKey] = user + "-" + doctor;
      console.log("room created");
    } else {
      console.log("room already exists");
    }
  });

  // Function to create or get the room for a user and doctor
  // function createOrGetRoom(user: Participant, doctor: Participant): string {
  //   const participants = [user, doctor];
  //   const roomKey = participants.sort().join("-"); // Generate a unique key for the room

  //   if (!rooms[roomKey]) {
  //     rooms[roomKey] = {
  //       participants,
  //       messages: [],
  //     };
  //   }
  //   console.log(roomKey, rooms);
  //   return roomKey;
  // }

  // // Function to check if a user and doctor already have a room
  // function hasRoom(user: Participant, doctor: Participant): boolean {
  //   const participants = [user, doctor];
  //   const roomKey = participants.sort().join("-");
  //   console.log(rooms);
  //   console.log(roomKey);
  //   return !rooms[roomKey];
  // }

  // Event when a user wants to create or join a room with a doctor

  socket.on(
    "joinRoom",
    ({ user, doctor }: { user: Participant; doctor: Participant }) => {
      if (rooms[doctor + "-" + user]) {
        socket.join(user + "-" + doctor);
      } else {
        console.log("room dont exists please create one and try again");
      }

      // console.log(user, doctor);
      // if (rooms[socket.id]) {
      //   console.log("room exists");
      // } else {
      //   socket.join(user + "-" + doctor);
      //   rooms[socket.id] = user + "-" + doctor;
      //   console.log(socket.id, "joined the room", rooms[socket.id]);
      // }
    }
  );

  // Event when the user sends a message to the doctor in the room
  socket.on(
    "sendMessage",
    ({
      user,
      doctor,
      message,
    }: {
      user: Participant;
      doctor: Participant;
      message: { sender: string; message: string };
    }) => {
      //console.log("mesga are sent by", socket.id, "to", rooms[socket.id]);

      if (rooms[doctor + "-" + user]) {
        io.to(rooms[doctor + "-" + user]).emit("sendMessage", {
          user,
          doctor,
          message,
        });
      }

      // const room = rooms[socket.id] as string | string[];

      // if (room) {
      //   io.to(room).emit("sendMessage", { user, doctor, message });
      //   console.log(user, message);
      // }

      // console.log(message);
      // //  const roomKey = rooms[user+"-"+doctor] ? true : createOrGetRoom(user, doctor)
      // const roomKey = user + "-" + doctor;
      // console.log(rooms[roomKey]);
      // if (rooms[roomKey]) {
      //   rooms[roomKey].messages.push({ user, message });
      //   // Broadcast the message to everyone in the room
      //   io.to(roomKey).emit("messageSent", { user, message });
      // } else {
      //   console.log(
      //     "create a room then join the room then come here gand maranekoo"
      //   );
      // }
    }
  );

  // Clean up room when the user disconnects
  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
    let key = socket.id;
    delete rooms.key;

    // Clean up rooms and messages if necessary
    // You can add additional logic here to handle room deletion
  });
});

const port = 3001;
server.listen(port, async () => {
  await mongodbConnect();

  console.log(`Server is running on http://localhost:${port}`);
});
